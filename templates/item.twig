<div class="grid-stack border" id="ContentForTabs">

</div>
<div class='d-none' id="hidden_gridStack_items">
{% for tab in tabs %}
<div 
	class="grid-stack-item"
	id="ContentFor{{tab['title']|slug}}"
	gs-h='6' gs-min-w='6'
	>
		<div class="card grid-stack-item-content">
			<div>
				<div class="card-header position-sticky">{{tab['title']|raw}}</div>
				<div class="card-body" style="cursor: default">{{tab['content']|raw}}</div>
			</div>
		</div>
	</div>
{% endfor %}
</div>

<link href="{{ glpiroot }}/node_modules/gridstack/dist/gridstack.min.css" rel="stylesheet"/>
<script src="{{ glpiroot }}/node_modules/gridstack/dist/gridstack-all.js"></script>

<script> // dropdown display

function updateWidgetWidth() {
        var columnWidgets = grid.getGridItems();
        var targetWidth = columnWidgets.length === 1 ? 12 : 6; // Full width for single widget, else half
        grid.batchUpdate();
        grid.update(columnWidgets[0], { w: targetWidth });
        if(columnWidgets.length > 1) {
            grid.compact();
        }
        grid.commit();
    }

function updateGridContent() {
	var $target = $( event.currentTarget ),
		val = $target.attr( 'data-value' ),
		$inp = $target.find( 'input' ),
		idx;
	
	if ( ( idx = options.indexOf( val ) ) > -1 ) {
		options.splice( idx, 1 );
		setTimeout( function() { $inp.prop( 'checked', false ) }, 0);
	} else {
		options.push( val );
		setTimeout( function() { $inp.prop( 'checked', true ) }, 0);
	}
	sessionStorage.setItem('grid-layout-{{layoutFor|slug}}', options);

	for (option of $('#ContentForTabs > div')) {
		grid.removeWidget(option, false);
		$(option).attr('gs-x', 'false')
		$(option).attr('gs-y', 'false')
		$(option).detach().prependTo('#hidden_gridStack_items');
	}

	if (options.includes('all')) {
		for (option of $('#hidden_gridStack_items > div')) {
			$(option).detach().prependTo( '#ContentForTabs' );
			grid.makeWidget($($(option))[0]);
		}
	} else {
		for (option of options) {
			$( '#ContentFor' + option ).detach().appendTo( '#ContentForTabs' );
			grid.makeWidget($( '#ContentFor' + option )[0]);
		}
	}
}
var options = [];

function initCheckboxFromSession() {
	checkedValues = sessionStorage.getItem('grid-layout-{{layoutFor|slug}}');
	if (!checkedValues) {
			$('.isTabButton').first().find('input').prop('checked', true)
	} else {
		checkedValues = checkedValues.split(',')
		$('.dropdown-menu a').each((i, e) => {
			if (checkedValues.includes($(e).data('value'))) {
				$(e).find('input').prop('checked', true);
			}
		});
	}
}

$(document).ready((e) => {
	initCheckboxFromSession();
	if ({{tabs | length == 1 ? 1 : 0}}) {
		$('#hidden_gridStack_items > div').first().detach().appendTo( '#ContentForTabs' );
		options.push($('#ContentForTabs > div').first().attr('id').replace('ContentFor', ''));
		grid.makeWidget($('#ContentForTabs > div')[0]); 
	} else {
		$('.dropdown-menu a').each((i, e) => {
			if ($(e).find('input').prop('checked')) {
				options.push($(e).attr('data-value'));
				$( '#ContentFor' + $(e).attr('data-value') ).detach().appendTo( '#ContentForTabs' );

				grid.makeWidget($( '#ContentFor' + $(e).attr('data-value') )[0]);
			}
		});
	}
	updateWidgetWidth();
	setTimeout(() => {
		grid.resizeToContent($('#ContentForTabs > div')[0]);
	}, 300);
	if ({{tabs|length == 1 ? 1 : 0}}) {
		grid.setStatic(true)
	}
	setTimeout(() => {
		grid.load();
	}, 300);
});

$( '.dropdown-menu a' ).on( 'click', function( event ) {
	updateGridContent();
	updateWidgetWidth();
	return false;
});

var grid = GridStack.init({
	cellHeight: 'auto',
	cellWidth: '1rem',
	handle: '.card-header',
	sizeToContent: true,
});
</script>