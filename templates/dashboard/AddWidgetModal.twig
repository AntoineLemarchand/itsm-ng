{% from 'macros/collapseChecklist.twig' import collapseChecklist %}
<div class="modal modal-lg fade" id="widgetModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
		<form action="{{addWidget_action}}" method="get" class="text-center">
			<div class="modal-header d-flex justify-content-between">
                <h1 class="modal-title fs-5" id="exampleModalLabel">{{"New widget"|trans}}</h1>
                <div>
                    <button type="button" class="btn btn-primary" onclick="addWidget()">{{"Add widget"|trans}}</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">{{"Close"|trans}}</button>
                </div>
			</div>
			<div class="modal-body row">
                <div id="data-selection-widget-modal" class="col-12 col-lg-6 accordion accordion-flush">
					{{ dataSelection|raw }}
					<div id="data-selection-search-content"></div>
                </div>

                <div class="col-12 col-lg-6 d-flex flex-column p-0">
                    {% include "dashboard/dashboardParams.twig" %}
                    <div id="preview-graph-widget-modal" style="height: 25rem">
                    </div>
                </div>
			</div>
            <input type="hidden" name="id" value="{{dashboardId}}"/>
            <input type="hidden" name="coords" value="[-1, -1]"/>
            <input type="hidden" name="update" value="update"/>
		</form>
    </div>
  </div>
</div>
<script>
	$(document).ready(function() {
		$('#widgetModal').insertAfter($('body'));
		$('#data-selection-widget-modal #data-selection-search-content form').attr('action', "#");
	});

	function updatePreview() {
		if (!$('#data-selection-search-content form').length) {
			return;
		}
		const formData = new FormData($('#data-selection-search-content form')[0]);

		$.ajax({
			url: "{{ajaxUrl}}",
			type: "POST",
			data: {
				'action': 'preview',
				'dataFilters': JSON.stringify(Object.fromEntries(formData))
			},
			success: function(data) {
				console.log(JSON.parse(data));
			},
			error: function(data) {
				console.log(data);
			}
		});
	}

	$("#data-selection-search-content").on('change', function() {
		updatePreview();
	});


	function openWidgetModal(coords) {
		$('#widgetModal input[name="coords"]').val(JSON.stringify(coords));
		$("#widgetModal").modal("show");
	}

	function toggleEdit() {
		// toggle display of all edit button
		var editButtons = document.getElementsByClassName("editButton");
		for (var i = 0; i < editButtons.length; i++) {
			editButtons[i].style.display = editButtons[i].style.display == "none" ? "block" : "none";
		}
	}

	function selectStatType(statType) {
		$('#widgetModal input[name="statType"]').val(statType);
	}

	function removeWidget(x, y) {
		$.ajax({
			url: "{{ajaxUrl}}",
			type: "POST",
			data: {
				id: "{{dashboardId}}",
				action: "delete",
				coords: JSON.stringify([x, y]),
			},
			success: function(data) {
				location.reload();
			},
			error: function(data) {
				console.log(data);
			}
		});
	}

	function getChartParams() {
		const statType = $('#widgetModal input[name="statType"]').val();
		const title = $('#title-widget-modal').val();
		const icon = $('#icon-widget-modal').val();
		const format = $('input[name="format"]:checked').val();
		const comparison = $('#parameter-selection-widget-modal-select').val();

		const direction = $('#direction-selection-widget-modal-select').val();
		const pieFormat = $('#pie-format-selection-widget-modal-select').val();

		const options = {
			comparison, icon
		}
		if (direction == 'horizontal') {
			options['horizontalBars'] = true;
		}

		if (pieFormat == 'half') {
			options['total'] = 'half';
			options['startAngle'] = 270;
		} else if (pieFormat == 'donut') {
			options['donut'] = true;
		}

		return {
			statType, statSelection, title, format, options
		}
	
	}

	function addWidget() {
		const coords = JSON.parse($('#widgetModal input[name="coords"]').val());
	}
</script>
